/**
 * A class responsible for managing module-provided art in compendia.
 */
declare class ModuleArt {
  /**
   * The stored map of actor UUIDs to their art information.
   */
  readonly map: Map<string, ModuleArt.Info>;

  constructor();

  /* -------------------------------------------- */

  /**
   * Set to true to temporarily prevent actors from loading module art.
   */

  get suppressArt(): boolean;
  set suppressArt(value: boolean);

  /* -------------------------------------------- */

  /**
   * Register any art mapping information included in active modules.
   */
  registerModuleArt(): Promise<void>;

  /* -------------------------------------------- */

  /**
   * Parse a provided module art mapping and store it for reference later.
   * @param moduleId  The module ID.
   * @param mapping   A mapping containing pack names, a list of actor IDs, and paths to the art provided by
   *                           the module for them.
   * @param [credit]  An optional credit line to attach to the Actor's biography.
   */
  #parseArtMapping(moduleId: string, mapping: object, credit?: string): Promise<void>;

  /* -------------------------------------------- */

  /**
   * Apply module portrait art to a freshly generated compendium index.
   * @param index  Index generated by `CompendiumCollection#getIndex`.
   */
  apply(index: Collection<any, any>): Collection<any, any>;

  /* -------------------------------------------- */

  /**
   * If a module provides art, return the path to is JSON mapping.
   * @param module  The module.
   */
  static getModuleArtPath(module: Module): string | null;

  /* -------------------------------------------- */

  /**
  /**
   * Returns all currently configured art modules in priority order.
   */
  static getArtModules(): ModuleArt.Descriptor[];
}

declare namespace ModuleArt {
  interface Info {
    actor: string;
    token: string | object;
  }
  
  interface Descriptor {
    id: string;
    label: string;
    mapping: string;
    credit?: string;
    priority: number;
  }
}

export default ModuleArt;
